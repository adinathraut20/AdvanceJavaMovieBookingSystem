package com.bookmovie.dao;

import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate4.HibernateCallback;
import org.springframework.orm.hibernate4.HibernateTemplate;
import org.springframework.stereotype.Repository;

import com.bookmovie.dto.Movie;
import com.bookmovie.dto.Show;
import com.bookmovie.dto.User;

@Repository
public class UserDaoImple implements UserDao {

	@Autowired
	HibernateTemplate hibetnateTemplate;
	@Override
	public void addUser(User user) {
		hibetnateTemplate.execute(new HibernateCallback<Void>() {

			@Override
			public Void doInHibernate(Session session) throws HibernateException {
				
				Transaction trans = session.beginTransaction();
				session.save(user);
				trans.commit();
				session.flush();
				session.close();
				
				return null;
				
			}
		});

	}

	@Override
	public User getUser(User user) {

		User usr = hibetnateTemplate.execute(new HibernateCallback<User>() {

			@Override
			public User doInHibernate(Session session) throws HibernateException {
				
				Transaction trans = session.beginTransaction();
				Query q = session.createQuery("from User where email = ? and password = ?");
				q.setString(0, user.getEmail());
				q.setString(1, user.getPassword());
				List<User> li = q.list();
				if(li.isEmpty()) {
					return null;
				}
				else {
					return li.get(0);
				}
			}
		});
		
		return usr;
	}

	@Override
	public List<Movie> getMovies() {
		
		List<Movie> li = hibetnateTemplate.execute(new HibernateCallback<List<Movie>>() {

			@Override
			public List<Movie> doInHibernate(Session session) throws HibernateException {
				Transaction trans = session.beginTransaction();
				Query q = session.createQuery("from Movie");
				List<Movie> l1 = q.list();
				if(!l1.isEmpty()) {
					return l1;
				}
				return null;
			}} );
		return li;
	}

	@Override
	public List<Show> getShow(int movieId) {
		
		return hibetnateTemplate.execute(new HibernateCallback<List<Show>>() {

			@Override
			public List<Show> doInHibernate(Session session) throws HibernateException {
				Transaction trans = session.beginTransaction();
				Query q = session.createQuery("from Show where movie_id = ?");
				List<Movie> l1 = q.list();
				if(!l1.isEmpty()) {
					return l1;
				}
				return null;
			}} );
	}

}
